#!/usr/bin/php
<?php
/**
 * @file
 * CLI command to call home to the Drupalcare server with update information.
 */

error_reporting(E_ALL);
ini_set('display_errors', TRUE);
ini_set('display_startup_errors', TRUE);
ini_set('xdebug.max_nesting_level', 200);

$cmd_name = 'compro-curl-update';
$desc = 'Send a summary of core/module updates to the drupalcare server.';
$usage = 'compro-curl-update';
$security_only = FALSE;
$flags = array(
  'h' => 'Get help info',
  's' => 'Security only updates',
);

// Handle flags.
$options = getopt('h');
if ($options && isset($options['h'])) {
  echo '### ' . $cmd_name . "\n\n";
  echo $desc . "\n\n";
  echo '#### Usage' . "\n\n";
  echo '  > ' . $usage . "\n\n";
  echo '#### Flags' . "\n\n";
  foreach ($flags as $flag => $does) {
    echo '**' . $flag . '** ' . $does . "\n";
  }
  echo "\n";
  exit;
}

$security = getopt('s');
if ($security && isset($security['s'])) {
  $security_only = TRUE;
}

$title = 'Drupalcare updates: ';
exec('echo ${PWD##*/}', $pwd);
$pwd = $pwd[0];
$description = '[Site: ' . $pwd . '] ';

// Get the available updates from drush.
$security_only ? exec('drush ups --security-only --format=php', $ups) : exec('drush ups --format=php', $ups);

if (isset($ups[0])) {
  $ups = unserialize($ups[0]);
}
else {
  $title .= 'Checked for Drupal updates';
}

$releases = array();
$core = FALSE;
$modules = 0;
$security = 0;
if (!empty($ups)) {
  echo 'Updates found. Formatting an update message.';
  foreach ($ups as $key => $meta) {
    // Count security updates.
    if ($meta['status'] != 4) {
      $security++;
      $releases[] = '(SECURITY) ' . $meta['title'] . ' from ' . $meta['existing_version'] . ' to ' . $meta['latest_version'];
    }
    else {
      $releases[] = $meta['title'] . ' from ' . $meta['existing_version'] . ' to ' . $meta['latest_version'];
    }

    // Toggle if there's a core update, otherwise count updates.
    if ($meta['type'] === 'project_core') {
      $core = TRUE;
    }
    else {
      $modules++;
    }
  }
}

// Format out the title.
if ($security >= 2) {
  $title .= '(includes ' . $security . ' SECURITY updates): ';
}
elseif ($security == 1) {
  $title .= '(include a SECURITY update): ';
}

if ($core) {
  $title .= 'Drupal core ';
}

if ($modules >= 2) {
  $title .= 'and ' . $modules . ' modules/themes';
}
elseif ($modules == 1) {
  $title .= 'and a module/theme';
}

// Format out the description.
if (count($releases)) {
  $description .= implode(', ', $releases);
}

// Get the mapping of sites to nids, for constructing the entityref.
$nid = FALSE;
$uuid = FALSE;
$nids_map = file_get_contents('http://drupalcare.build.commercialprogression.net/sites/nids');
$nids_map = json_decode($nids_map);
foreach ($nids_map as $entry) {
  if ($entry->field_site_id === $pwd) {
    $nid = $entry->nid;
    $uuid = $entry->uuid;
    break;
  }
}

// Construct the HAL-JSON object.
$entity = [
  'title' => [[
    'value' => $title
  ]],
  'field_update_description' => [[
    'value' => $description
  ]],
  'type' => [[
    'target_id' => 'component_update'
  ]],
  '_links' => [
    'type' => [
      'href' => 'http://drupalcare.build.commercialprogression.net/rest/type/component/component_update'
    ]
  ],
];

// If updates applied, click the checkbox.
if (count($releases)) {
  $entity['field_update_ran'] = [[
    'value' => '1'
  ]];
}

// Add the site relation if we know it.
if ($nid) {
  $entity['_links']['http://drupalcare.build.commercialprogression.net/rest/relation/component/component_update/field_update_site'] = [[
    'href' => 'http://drupalcare.build.commercialprogression.net/node/' . $nid . '?_format=hal_json'
  ]];
  $entity['_embedded'] = [[
    '_links' => [
      'self' => [
        'href' => 'http://drupalcare.build.commercialprogression.net/node/' . $nid . '?_format=hal_json'
      ],
      'type' => [
        'href' => 'http://drupalcare.build.commercialprogression.net/rest/type/node/site'
      ]
    ],
    'uuid' => [[
      'value' => $uuid
    ]]
  ]];
  // This is the addition to the JSON that *actually* populates the entity.
  $entity['field_update_site'] = [[
    'target_id' => $nid
  ]];
}
$serialized_entity = json_encode($entity);

// Post the object to the DrupalCare site.
echo 'Sending update to drupalcare.build.commercialprogression.net';

// Log in.
$fields = array(
  'name' => 'cashew',
  'pass' => 'password we will want to change',
  'form_id' => 'user_login_form',
);
$fields_string = '';
foreach ($fields as $key => $value) {
  $fields_string .= $key . '=' . urlencode($value) . '&';
}
rtrim($fields_string, '&');

$process = curl_init('http://drupalcare.build.commercialprogression.net/user');
curl_setopt($process, CURLOPT_TIMEOUT, 30);
curl_setopt($process, CURLOPT_RETURNTRANSFER, TRUE);
curl_setopt($process, CURLOPT_POST, count($fields));
curl_setopt($process, CURLOPT_POSTFIELDS, $fields_string);
$login = curl_exec($process);

// Fetch a new CSRF token.
curl_setopt($process, CURLOPT_URL, 'http://drupalcare.build.commercialprogression.net/rest/session/token');
$csrf_token = curl_exec($process);
curl_close($process);

// Perform the actual request.
$process = curl_init('http://drupalcare.build.commercialprogression.net/entity/component?_format=hal_json');
curl_setopt($process, CURLOPT_HEADER, 1);
curl_setopt($process, CURLOPT_TIMEOUT, 30);
curl_setopt($process, CURLOPT_RETURNTRANSFER, TRUE);
curl_setopt($process, CURLOPT_USERPWD, $fields['name'] . ':' . $fields['pass']);
curl_setopt($process, CURLOPT_HTTPHEADER, array(
  'Content-Type: application/hal+json',
  'Accept: application/json',
  'X-CSRF-Token: ' . $csrf_token,
));
curl_setopt($process, CURLOPT_POST, 1);
curl_setopt($process, CURLOPT_POSTFIELDS, $serialized_entity);
$return = curl_exec($process);
curl_close($process);
