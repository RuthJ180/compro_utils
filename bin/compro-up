#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
COMMIT_MESSAGE="drush pm-update #drupalcare"

# @TODO: Flag to allow any remote desired.

# Create or check out the 'build' branch
git checkout prod || echo "Building branch from current rather than prod"

# Git pull from prod to ensure this shit's up to date.
git pull origin prod || echo "Production branch not available to pull"

# Do the update stuff on a build branch.
git checkout -b build || git checkout build && git merge prod

# Pull from build if it's available? @TODO: Will this fast-forward correctly?
git pull origin build || echo "Build is up to date, apparently"

# Update Drupal (@TODO: Parse this output for smart commit messages)
# NOTE: This will only work right if you use .txt ignoring from .gitignore_global!
drush pm-update -y

# Commit the changes
git add .
# Commit will fail if there are no changes.
git commit -m "${COMMIT_MESSAGE}"

git push origin build

git checkout "${CURRENT_BRANCH}"

exit 0
