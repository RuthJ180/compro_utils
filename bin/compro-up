#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

# Get custom configs.
if [ -e ~/.compro ]; then
  source ~/.compro
fi

NAME=${PWD##*/}
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
COMMIT_MESSAGE="drush pm-update #drupalcare"
SECURITY_ONLY=false
UPDATES=true

# Allow flag to override config.
# @TODO: Flag to allow any remote desired.
while getopts "s" OPTION
do
  case $OPTION in
    s)
      SECURITY_ONLY=true
      ;;
  esac
done

# Create or check out the 'build' branch
git checkout prod || echo "Building branch from current rather than prod"

# Git pull from prod to ensure this shit's up to date.
git pull origin prod || echo "Production branch not available to pull"

# Do the update stuff on a build branch.
git checkout -b build || git checkout build && git merge prod

# Pull from build if it's available? @TODO: Will this fast-forward correctly?
git pull origin build || echo "Build is up to date, apparently"

# Send a slack message if slack variable is set.
if [ -n "$SLACK" ]; then
  TEXT="Sirs and madams, I am checking to see if $NAME needs updated."
  curl -X POST --data-urlencode 'payload={"text": "'"$TEXT"'"}' $SLACK
fi

# Update Drupal (@TODO: Parse this output for smart commit messages)
if [ "$SECURITY_ONLY" == true ]; then
  drush -y pm-update --security-only
else
  drush pm-update -y
fi

# Commit the changes
git add .
# Commit will fail if there are no changes.
git commit -m "${COMMIT_MESSAGE}" || UPDATES=false

if [ "$UPDATES" == true ]; then
  # git push origin build
  # Send a slack message if slack variable is set.
  if [ -n "$SLACK" ]; then
    TEXT="Sirs and madams, $NAME has been succesfully updated."
    curl -X POST --data-urlencode 'payload={"text": "'"$TEXT"'"}' $SLACK
  fi
else
  if [ -n "$SLACK" ]; then
    TEXT="Sirs and madams, $NAME required no updates, you may rest easy."
    curl -X POST --data-urlencode 'payload={"text": "'"$TEXT"'"}' $SLACK
  fi
fi

git checkout "${CURRENT_BRANCH}"

exit 0
