#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

# Help info.
THIS="compro-up"
DESC="Do core and module updates using the 'build' workflow."
USAGE="compro-up"
declare -A FLAGS
FLAGS=(
  [b]="Specify a production branch other than prod"
  [h]="Get help info"
  [r]="Specify a remote other than origin"
  [s]="Only do security updates"
)

# Get custom configs.
if [ -e ~/.compro ]; then
  source ~/.compro
fi

NAME=${PWD##*/}
PROD_BRANCH="prod"
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
COMMIT_MESSAGE="drush pm-update #drupalcare"
SECURITY_ONLY=false
UPDATES=true
REMOTE="origin"

# Allow flag to override config.
while getopts "b:hr:s" OPTION
do
  case $OPTION in
    b)
      PROD_BRANCH=$OPTARG
      ;;
    h)
      echo "### ${THIS}

${DESC}

#### Usage

  > ${USAGE}

#### Flags
"
      for i in "${!FLAGS[@]}"
      do
        echo "**$i** ${FLAGS[$i]}"
      done
      echo ""
      exit 0
      ;;
    r)
      REMOTE=$OPTARG
      ;;
    s)
      SECURITY_ONLY=true
      ;;
  esac
done

# Create or check out the 'build' branch
git checkout "${PROD_BRANCH}" || echo "Building branch from current rather than prod"

# Git pull from prod to ensure this shit's up to date.
git pull "${REMOTE}" "${PROD_BRANCH}" || echo "Production branch not available to pull"

# Do the update stuff on a build branch.
git checkout -b build || git checkout build && git merge "${PROD_BRANCH}"

# Pull from build if it's available? @TODO: Will this fast-forward correctly?
git pull "${REMOTE}" build || echo "Build is up to date, apparently"

# Send a slack message if slack variable is set.
if [ -n "$SLACK" ]; then
  TEXT="Sirs and madams, I am checking to see if $NAME needs updated."
  curl -X POST --data-urlencode 'payload={"text": "'"$TEXT"'"}' $SLACK
fi

# Update Drupal (@TODO: Parse this output for smart commit messages)
if [ "$SECURITY_ONLY" == true ]; then
  drush -y pm-update --security-only
else
  drush pm-update -y
fi

# Commit the changes
git add .
# Commit will fail if there are no changes.
git commit -m "${COMMIT_MESSAGE}" || UPDATES=false

if [ "$UPDATES" == true ]; then
  git push "${REMOTE}" build
  if [ -n "$SLACK" ]; then
    TEXT=":warning: Sirs and madams, $NAME has been succesfully updated, please review."
    curl -X POST --data-urlencode 'payload={"text": "'"$TEXT"'"}' $SLACK
  fi
else
  if [ -n "$SLACK" ]; then
    TEXT=":white_check_mark: Sirs and madams, $NAME required no updates, you may rest easy."
    curl -X POST --data-urlencode 'payload={"text": "'"$TEXT"'"}' $SLACK
  fi
fi

git checkout "${CURRENT_BRANCH}"

exit 0
